<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
    <!--中央调度器，1在tomocat启动时创建springmvc容器对象，2放在servletContext中-->
    <!--声明springmvc的中央调度器DispatcherServlet-->
    <!--  tomcat服务器启动
    创建DispatcherServlet这个servlet对象， 创建servlet对象时，会执行init().
    在init()方法中会创建springmvc的容器对象 WebApplicationContext.
    在创建WebApplicationContext对象时， 会读取classpath:springmvc.xml配置文件，
    读取配置文件同时，会创建文件中使用<bean>声明对象， 这样就能把 MyController对象创建出来。
    它就可以处理请求。-->
    <!-- DispatcherServlet在 tomcat启动时创建， 重要的两个事情
    1.创建容器对象WebApplicationContext
    2.把创建好容器放到ServletContext作用域-->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:dispatcherServlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
    <!--监听器，创建spring容器对象-->
    <!--声明spring的监听器ContextLoaderListener-->
    <!--注册监听器-->
    <!--
       在tomcat启动时， 会加载 /WEB-INF/spring.xml 配置文件。
       为什么要加载文件？
         在监听器对象创建时， 会创建spring的容器对象 WebApplicationContext
         同时会读取 默认的 /WEB-INF/spring.xml 配置文件。
         spring默认的读取的配置文件可以自定义路径和名称，使用contextConfigLocation
            -->
   <context-param>
       <param-name>contextConfigLocation</param-name>
       <param-value>classpath:applicationContext.xml</param-value>
   </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!--过滤器-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>

        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>



</web-app>